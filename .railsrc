# Rails-specific tweaks for irb:
if rails_env = ENV['RAILS_ENV']
  rails_root = File.basename(Dir.pwd)
 
  rails_env_string = case rails_env
  when 'development'
    'dev'
  when 'production'
    'prod'
  else
    rails_env
  end
 
  IRB.conf[:PROMPT] ||= {}
  IRB.conf[:PROMPT][:RAILS] = {
    :PROMPT_I => "#{rails_root} #{rails_env_string}> ",
    :PROMPT_S => "#{rails_root} #{rails_env_string}* ",
    :PROMPT_C => "#{rails_root} #{rails_env_string}? ",
    :RETURN => "=> %s\n"
  }
  IRB.conf[:PROMPT_MODE] = :RAILS

  # Called after the irb session is initialized and Rails has
  # been loaded (props: Mike Clark).
  IRB.conf[:IRB_RC] = Proc.new do
    ActiveRecord::Base.instance_eval { alias :[] :find }
    alias :r! :reload!
  end

  class Object
    def log
      ActiveRecord::Base.clear_active_connections!
      ActiveRecord::Base.logger = Logger.new(STDOUT)
    end
  end

  # Helper methods to turn SQL logging on and off:
  def loud_logger
    set_logger_to Logger.new(STDOUT)
  end

  def quiet_logger
    set_logger_to nil
  end

  def set_logger_to(logger)
    ActiveRecord::Base.logger = logger
    ActiveRecord::Base.clear_active_connections!
  end

  puts '*** Type r! to reload rails.                         ***'
  puts '*** Type [] instead of find. "Tour[21].              ***'
  puts '*** Type log for Rails log in irb. Must be 1st call. ***'
  puts '*** Type loud_logger/quiet_logger to log SQL in irb. ***'

end
